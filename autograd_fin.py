# -*- coding: utf-8 -*-
"""autograd_fin.ipynb

Automatically generated by Colaboratory.

"""

class Value:
    """ stores a value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')
 
        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
            
            
        out._backward = _backward

        return out
    
    
        
        

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')
  
        def _backward():
            
            
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out

    def relu(self):
        
        out = Value(np.where(self.data < 0, 0.0, self.data), (self,), 'ReLU')
 
        def _backward():
            self.grad += np.where(out.data > 0,1,0.0) * out.grad
        out._backward = _backward

        return out
    def matmul(self,other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(np.matmul(self.data , other.data), (self, other), 'matmul')

        def _backward():
            self.grad += np.dot(out.grad,other.data.T)
            other.grad += np.dot(self.data.T,out.grad)
            
            
        out._backward = _backward

        return out
    def softmax(self):
        b = np.reshape(np.max(self.data),(-1,1))
        out =  Value(np.exp(self.data-b) / np.sum(np.exp(self.data-b), axis=-1)[:, None], (self,), 'softmax')
        #softmax = out.data

        def _backward():
            #print(f'self.grad{np.shape(self.grad)},out.grad {np.shape(out.grad)}, out.data {np.shape(out.data)}, new {np.shape(np.reshape(np.sum(out.grad * out.data, 1),[-1, 1]))}')
            self.grad += (out.grad - np.reshape(
            np.sum(out.grad * out.data, -1),
            [-1, 1]
              )) * out.data
        out._backward = _backward

        return out
    def sigmoid(self):
        out = Value( 1 / (1 + np.exp(-self.data)), (self,), 'sigmoid')
        #sigmoid = out.data

        def _backward():
            self.grad += out.grad * out.data * (1 - out.data)
        out._backward = _backward
        return out

    def log(self):
        
        """
        if len(list(zip(*np.where(self.data == 0.0))))!=0:
            print(self.data)
        """
        out = Value(np.log(self.data),(self,),'log')
        
  
        def _backward():
            #np.where((out.grad/self.data)>0, np.log(myarray), 0)
            self.grad += out.grad/self.data
        out._backward = _backward

        return out
    def reshape(self,shape):
        out = Value(np.reshape(self.data,shape),(self,),'reshape')
        def _backward():
            self.grad += np.reshape(out.grad,np.shape(self.data))
        out._backward = _backward
        return out

    def concat(self,other,axis=-1):
        #currently supports concatenation along 3rd dimension
        assert isinstance(other, Value), "please use Value cast to other"
        out = Value(np.concatenate((self.data,other.data),axis = axis))
        def _backward():
            self.grad += out.grad[:,:,0:self.data.shape[-1]]
            other.grad += out.grad[:,:,self.data.shape[-1]:out.data.shape[-1]]
        out._backward = _backward
        return out
    
    def reduce_sum(self,axis = None):
        out = Value(np.sum(self.data,axis = axis), (self,), 'REDUCE_SUM')
 
        def _backward():
            output_shape = np.array(self.data.shape)
            
            
            output_shape[axis] = 1
            tile_scaling = self.data.shape // output_shape
            grad = np.reshape(np.asarray(out.grad), output_shape)
            self.grad += np.tile(grad, tile_scaling)
            #tile_scaling = np.asarray(self.data.shape // np.asnumpy(output_shape))
            
            #grad = np.reshape(np.asarray(out.grad), np.asnumpy(output_shape))
           
            #self.grad += np.tile(grad, np.asnumpy(tile_scaling))
            
        out._backward = _backward

        return out

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
 
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            #print(v)
            v._backward()

    def __neg__(self): # -self
        return self * -1

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"

class Dense():
  def __init__(self,nin,nout,nonlin):
    self.W = Value(np.random.randn(nin,nout))
    self.b = Value(np.zeros_like(np.random.randn(nout,)))
    self.nonlin = nonlin
  def __call__(self,X,training = True):
    out = X.matmul(self.W)+self.b if training else Value(np.matmul(X,self.W.data)+self.b.data[0])
    out = out.softmax() if self.nonlin=='softmax' else out.relu() if self.nonlin=='relu' else out.sigmoid()
    out = out if training else out.data
    return out 

  def train(self,lr=0.01):
    '''
    only supporting sgd for now
    '''
    self.W.data = self.W.data - lr* self.W.grad
    self.b.data = self.b.data - lr* self.b.grad
    self.W.grad,self.b.grad = 0,0

from keras.datasets import mnist
import keras
import numpy as np

(x_train,y_train),(x_test,y_test) = mnist.load_data()
train_images = np.asarray(x_train, dtype=np.float64) / 255.0
test_images = np.asarray(x_test, dtype=np.float64) / 255.0
#train_images = train_images.reshape(60000,784)
#test_images = test_images.reshape(10000,784)
y_train = np.asarray(keras.utils.to_categorical(y_train))

dense1 = Dense(784,256,nonlin = 'relu')
dense2 = Dense(256,10,nonlin = 'softmax')

steps = 20000
batch_size = 32
for step in range(steps):
  ri = np.random.permutation(train_images.shape[0])[:batch_size]
  Xb, yb = Value(train_images[ri]), Value(y_train[ri])
  Xb = Xb.reshape((32,784))
  y_pred = dense1(Xb)
  y_pred = y_pred.reshape((32,16,16))
  y_pred = y_pred.reshape((32,256))
  y_pred = dense2(y_pred).log()
  zb = yb*y_pred

  #outb = zb.reduce_sum(axis = 1)
  finb = -(1/batch_size)*zb.reduce_sum()  #cross entropy loss
  finb.backward()
  dense1.train()
  dense2.train()
  if step%1000==0:
    print(finb)

from sklearn.metrics import accuracy_score

accuracy_score(np.argmax(dense2(dense1(np.reshape(test_images,(10000,784)),training=False),training=False),axis = 1),y_test)

16*16*32

a = np.random.randn(10,6,3)
b = np.random.randn(10,6,4)

np.shape(np.concatenate((a,b),axis= -1))

import tensorflow as tf
x,y = tf.random.normal((8,9,5),dtype = tf.float32),tf.random.normal((8,9,4),dtype = tf.float32)
with tf.GradientTape(persistent=True) as g:
  g.watch(x)
  g.watch(y)
  a = tf.keras.layers.concatenate(inputs = [x,y],axis = -1)
  fin = tf.reduce_sum(a)

fin

g.gradient(fin,x)
g.gradient(fin,y)

x,y = Value(np.asarray(x)),Value(np.asarray(y))

a = x.concat(y)
fin = a.reduce_sum()

fin

fin.backward()

x.grad

y.grad

np.concatenate((p[:,:,0:5],p[:,:,5:10]),axis = -1)==p

np.shape(p[:,:,5:10])

np.max(x.data,axis = -1)



